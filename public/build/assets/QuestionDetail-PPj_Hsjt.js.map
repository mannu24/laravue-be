{"version":3,"file":"QuestionDetail-PPj_Hsjt.js","sources":["../../../node_modules/lucide-vue-next/dist/esm/icons/chevron-up.js","../../../node_modules/lucide-vue-next/dist/esm/icons/circle-alert.js","../../../node_modules/lucide-vue-next/dist/esm/icons/circle-chevron-up.js","../../../node_modules/lucide-vue-next/dist/esm/icons/lock.js","../../../node_modules/lucide-vue-next/dist/esm/icons/pen-line.js","../../../resources/js/components/ui/avatar/Avatar.vue","../../../resources/js/components/ui/avatar/AvatarFallback.vue","../../../resources/js/components/ui/avatar/AvatarImage.vue","../../../resources/js/components/ui/avatar/index.js","../../../resources/js/components/elements/AnswersWithReplies.vue","../../../resources/js/views/QuestionDetail.vue"],"sourcesContent":["/**\n * @license lucide-vue-next v0.474.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ChevronUp = createLucideIcon(\"ChevronUpIcon\", [\n  [\"path\", { d: \"m18 15-6-6-6 6\", key: \"153udz\" }]\n]);\n\nexport { ChevronUp as default };\n//# sourceMappingURL=chevron-up.js.map\n","/**\n * @license lucide-vue-next v0.474.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst CircleAlert = createLucideIcon(\"CircleAlertIcon\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"line\", { x1: \"12\", x2: \"12\", y1: \"8\", y2: \"12\", key: \"1pkeuh\" }],\n  [\"line\", { x1: \"12\", x2: \"12.01\", y1: \"16\", y2: \"16\", key: \"4dfq90\" }]\n]);\n\nexport { CircleAlert as default };\n//# sourceMappingURL=circle-alert.js.map\n","/**\n * @license lucide-vue-next v0.474.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst CircleChevronUp = createLucideIcon(\"CircleChevronUpIcon\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"m8 14 4-4 4 4\", key: \"fy2ptz\" }]\n]);\n\nexport { CircleChevronUp as default };\n//# sourceMappingURL=circle-chevron-up.js.map\n","/**\n * @license lucide-vue-next v0.474.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Lock = createLucideIcon(\"LockIcon\", [\n  [\"rect\", { width: \"18\", height: \"11\", x: \"3\", y: \"11\", rx: \"2\", ry: \"2\", key: \"1w4ew1\" }],\n  [\"path\", { d: \"M7 11V7a5 5 0 0 1 10 0v4\", key: \"fwvmzm\" }]\n]);\n\nexport { Lock as default };\n//# sourceMappingURL=lock.js.map\n","/**\n * @license lucide-vue-next v0.474.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst PenLine = createLucideIcon(\"PenLineIcon\", [\n  [\"path\", { d: \"M12 20h9\", key: \"t2du7b\" }],\n  [\n    \"path\",\n    {\n      d: \"M16.376 3.622a1 1 0 0 1 3.002 3.002L7.368 18.635a2 2 0 0 1-.855.506l-2.872.838a.5.5 0 0 1-.62-.62l.838-2.872a2 2 0 0 1 .506-.854z\",\n      key: \"1ykcvy\"\n    }\n  ]\n]);\n\nexport { PenLine as default };\n//# sourceMappingURL=pen-line.js.map\n","<script setup>\nimport { cn } from '/resources/js/lib/utils';\nimport { AvatarRoot } from 'radix-vue';\nimport { avatarVariant } from '.';\n\nconst props = defineProps({\n  class: { type: null, required: false },\n  size: { type: null, required: false, default: 'sm' },\n  shape: { type: null, required: false, default: 'circle' },\n});\n</script>\n\n<template>\n  <AvatarRoot :class=\"cn(avatarVariant({ size, shape }), props.class)\">\n    <slot />\n  </AvatarRoot>\n</template>\n","<script setup>\nimport { AvatarFallback } from 'radix-vue';\n\nconst props = defineProps({\n  delayMs: { type: Number, required: false },\n  asChild: { type: Boolean, required: false },\n  as: { type: null, required: false },\n});\n</script>\n\n<template>\n  <AvatarFallback v-bind=\"props\">\n    <slot />\n  </AvatarFallback>\n</template>\n","<script setup>\nimport { AvatarImage } from 'radix-vue';\n\nconst props = defineProps({\n  src: { type: String, required: true },\n  referrerPolicy: { type: null, required: false },\n  asChild: { type: Boolean, required: false },\n  as: { type: null, required: false },\n});\n</script>\n\n<template>\n  <AvatarImage v-bind=\"props\" class=\"h-full w-full object-cover\" />\n</template>\n","import { cva } from 'class-variance-authority';\n\nexport { default as Avatar } from './Avatar.vue';\nexport { default as AvatarFallback } from './AvatarFallback.vue';\nexport { default as AvatarImage } from './AvatarImage.vue';\n\nexport const avatarVariant = cva(\n  'inline-flex items-center justify-center font-normal text-foreground select-none shrink-0 bg-secondary overflow-hidden',\n  {\n    variants: {\n      size: {\n        sm: 'h-10 w-10 text-xs',\n        base: 'h-16 w-16 text-2xl',\n        lg: 'h-32 w-32 text-5xl',\n      },\n      shape: {\n        circle: 'rounded-full',\n        square: 'rounded-md',\n      },\n    },\n  },\n);\n","<template>\n    <div class=\"space-y-4\">\n        <div v-for=\"item in items\" :key=\"item.id\" class=\"relative\" :class=\"{ 'pl-[20px]': depth > 0 }\">\n            <!-- Answer Container -->\n            <div class=\"flex gap-4 p-4 dark:bg-gray-950 border-[1px] rounded-lg shadow\">\n                <!-- Upvote Section -->\n                <div v-if=\"item.user?.id !== authUserId\" class=\"flex flex-col items-center\">\n                    <button @click=\"() => $emit('upvote', item.id)\"\n                        class=\"p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\n                        :class=\"{ 'text-primary': item.hasUpvoted }\">\n                        <ChevronUp class=\"h-5 w-5\" />\n                    </button>\n                    <span class=\"text-sm font-medium\">{{ item.upvotes || 0 }}</span>\n                </div>\n\n                <!-- Content Section -->\n                <div class=\"flex-1\">\n                    <div v-html=\"item.content\" class=\"prose dark:prose-invert max-w-none text-sm\"></div>\n                    <div class=\"flex items-center justify-between mt-4\">\n                        <div class=\"flex items-center gap-4 text-sm text-gray-500\">\n                            <div class=\"flex items-center gap-2\">\n                                <Avatar class=\"h-6 w-6\">\n                                    <AvatarImage :src=\"item.user?.avatar_url\" />\n                                    <AvatarFallback class=\"text-white\">{{ getInitials(item.user?.name) }}\n                                    </AvatarFallback>\n                                </Avatar>\n                                <span>{{ item.user?.name || 'Anonymous' }}</span>\n                            </div>\n                            <span>{{ formatDate(item.created_at) }}</span>\n                        </div>\n                        <div class=\"flex items-center gap-2\">\n                            <Button variant=\"ghost\" size=\"sm\" @click=\"toggleReply(item.id)\">\n                                <MessageSquare class=\"h-4 w-4 mr-1\" />\n                                Reply\n                            </Button>\n                        </div>\n                    </div>\n\n                    <!-- Reply Form -->\n                    <div v-if=\"showReplyForm[item.id]\" class=\"mt-4 border-l-2 border-primary pl-4\">\n                        <MarkDownEditor v-model=\"replyContent[item.id]\" placeholder=\"Write your reply...\"\n                            :min-height=\"100\" />\n                        <div class=\"flex justify-end mt-2 space-x-2\">\n                            <Button variant=\"outline\" size=\"sm\" @click=\"toggleReply(item.id)\">Cancel</Button>\n                            <Button size=\"sm\" @click=\"submitReply(item.id)\">Post Reply</Button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Replies -->\n            <div v-if=\"item.replies && item.replies.length > 0\" class=\"mt-2\">\n                <div v-for=\"reply in visibleReplies(item.id)\" :key=\"reply.id\" class=\"ml-6 border-l-2 border-gray-200 pl-4 py-2\">\n                    <div class=\"flex gap-4 p-4 dark:bg-gray-950 border-[1px] rounded-lg shadow\">\n                        <!-- Upvote Section -->\n                        <div v-if=\"reply.user?.id !== authUserId\" class=\"flex flex-col items-center\">\n                            <button @click=\"$emit('upvote', { id: reply.id, type: 'answer' })\"\n                                class=\"p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\">\n                                <ChevronUp class=\"h-5 w-5\" />\n                            </button>\n                            <span class=\"text-sm font-medium\">{{ reply.upvotes_count || 0 }}</span>\n                        </div>\n\n                        <!-- Content Section -->\n                        <div class=\"flex-1\">\n                            <div v-html=\"reply.content\" class=\"prose dark:prose-invert max-w-none text-sm\"></div>\n                            <div class=\"flex items-center justify-between mt-4\">\n                                <div class=\"flex items-center gap-4 text-sm text-gray-500\">\n                                    <div class=\"flex items-center gap-2\">\n                                        <Avatar class=\"h-6 w-6\">\n                                            <AvatarImage :src=\"reply.user?.avatar_url\" />\n                                            <AvatarFallback class=\"text-white\">{{ getInitials(reply.user?.name) }}\n                                            </AvatarFallback>\n                                        </Avatar>\n                                        <span>{{ reply.user?.name || 'Anonymous' }}</span>\n                                    </div>\n                                    <span>{{ formatDate(reply.created_at) }}</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Show More/Less Button -->\n                <div v-if=\"item.replies.length > maxReplies\" class=\"ml-6 pl-4 mt-2\">\n                    <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        @click=\"toggleReplies(item.id)\"\n                        class=\"text-gray-500 hover:text-gray-700 dark:hover:text-gray-400\"\n                    >\n                        {{ showAllReplies[item.id] ? 'Show Less' : `Show More (${item.replies.length - maxReplies} more)` }}\n                    </Button>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport { Button } from '@/components/ui/button'\nimport { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar'\nimport { ChevronUp, MessageSquare } from 'lucide-vue-next'\nimport MarkDownEditor from './MarkDownEditor.vue'\n\nconst props = defineProps({\n    items: { type: Array, required: true },\n    authUserId: { type: Number, required: true },\n    maxReplies: { type: Number, default: 0 }\n})\n\nconst emit = defineEmits(['reply', 'upvote'])\n\nconst showReplyForm = ref({})\nconst replyContent = ref({})\nconst showMore = ref({}) // Track which items' deeper replies are expanded\nconst showAllReplies = ref({}) // Track if all replies are shown for each item\n\nconst toggleReply = (id) => {\n    showReplyForm.value[id] = !showReplyForm.value[id]\n    if (!showReplyForm.value[id]) replyContent.value[id] = ''\n}\n\nconst submitReply = (parentId) => {\n    const content = replyContent.value[parentId]\n    if (!content?.trim()) return\n    emit('reply', { parentId, content })\n    toggleReply(parentId)\n}\n\nconst toggleShowMore = (id) => {\n    showMore.value[id] = !showMore.value[id]\n}\n\nconst toggleReplies = (id) => {\n    showAllReplies.value[id] = !showAllReplies.value[id]\n}\n\nconst visibleReplies = (id) => {\n    const item = props.items.find(item => item.id === id)\n    if (!item || !item.replies) return []\n\n    if (showAllReplies.value[id]) {\n        return item.replies\n    } else {\n        return item.replies.slice(0, props.maxReplies)\n    }\n}\n\nconst formatDate = (dateString) => {\n    return new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: 'numeric' }).format(new Date(dateString))\n}\n\nconst getInitials = (name) => {\n    return name ? name.split(' ').map(n => n[0]).join('').toUpperCase() : '?'\n}\n</script>\n","<template>\n    <div class=\"max-w-4xl mx-auto py-8 px-4\">\n        <div v-if=\"loading\" class=\"text-center\">\n            <Spinner class=\"h-8 w-8 text-primary\" />\n            <p class=\"mt-2 text-gray-600\">Loading question...</p>\n        </div>\n\n        <div v-else-if=\"question\" class=\"space-y-6\">\n            <BackNavigator :items=\"questionBreadcrumbs\" />\n            <Card>\n                <CardHeader>\n                    <div class=\"flex items-center justify-between\">\n                        <CardTitle class=\"text-2xl font-bold\">{{ question.title }}</CardTitle>\n                        <Button @click=\"upvoteQuestion\" variant=\"outline\" size=\"sm\" class=\"flex items-center space-x-1\">\n                            <CircleChevronUp class=\"h-6 w-6\" />\n                            <span>{{ question.upvotes_count }}</span>\n                        </Button>\n                    </div>\n                    <CardDescription class=\"flex items-center space-x-2 text-sm text-gray-500\">\n                        <UserIcon class=\"h-4 w-4\" />\n                        <span>{{ question.user ? question.user.name : 'Anonymous' }}</span>\n                        <span>•</span>\n                        <span>{{ (question.created_at) }}</span>\n                    </CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <div v-html=\"truncatedContent\" class=\"prose max-w-none\"></div>\n                    <Button v-if=\"isContentTruncated\" @click=\"showFullContent = !showFullContent\" variant=\"link\"\n                        class=\"mt-2\">\n                        {{ showFullContent ? 'Show less' : 'Read more' }}\n                    </Button>\n                </CardContent>\n                <CardFooter class=\"flex justify-between items-center\">\n                    <div class=\"flex space-x-4\">\n                        <span class=\"flex items-center space-x-1\">\n                            <MessageSquareIcon class=\"h-4 w-4 text-gray-500\" />\n                            <span class=\"text-sm text-gray-500\">{{ answers.length }} Answers</span>\n                        </span>\n                        <span v-if=\"question.views_count\" class=\"flex items-center space-x-1\">\n                            <EyeIcon class=\"h-4 w-4 text-gray-500\" />\n                            <span class=\"text-sm text-gray-500\">{{ question.views_count }} Views</span>\n                        </span>\n                    </div>\n                </CardFooter>\n            </Card>\n\n            <!-- Add this button after the question card and before the answers section -->\n            <div class=\"flex justify-end mt-4\">\n                <Button variant=\"outline\" size=\"lg\" @click=\"showAnswerForm = !showAnswerForm\" class=\"gap-2\">\n                    <PenLine class=\"h-4 w-4\" />\n                    {{ showAnswerForm ? 'Hide Answer Form' : 'Write an Answer' }}\n                </Button>\n            </div>\n\n            <!-- Replace the existing answer form Card with this -->\n            <Card v-if=\"showAnswerForm && authToken\" class=\"mt-4\">\n                <CardHeader>\n                    <CardTitle>Your Answer</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <!-- <MarkDownEditor v-model=\"newAnswer\" placeholder=\"Write your answer...\" :min-height=\"300\" /> -->\n                </CardContent>\n                <CardFooter class=\"flex justify-end\">\n                    <Button @click=\"submitAnswer\">Post Your Answer</Button>\n                </CardFooter>\n            </Card>\n\n            <Card v-else-if=\"showAnswerForm && !authToken\">\n                <CardContent class=\"text-center py-6\">\n                    <LockIcon class=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p class=\"text-lg font-semibold mb-2\">Sign up or log in to answer</p>\n                    <p class=\"text-gray-500 mb-4\">You need to be logged in to post an answer to this question.</p>\n                    <div class=\"space-x-4\">\n                        <Button @click=\"router.push('/login')\">Log in</Button>\n                        <Button @click=\"router.push('/signup')\" variant=\"outline\">Sign up</Button>\n                    </div>\n                </CardContent>\n            </Card>\n\n            <!-- Answers Section -->\n            <div class=\"space-y-4\">\n                <h2 class=\"text-lg font-medium\">{{ answers.length }} Answers</h2>\n                <AnswersWithReplies :items=\"answers\" :auth-user-id=\"authUserId\" :max-replies=\"2\" @reply=\"handleReply\"\n                    @upvote=\"handleUpvote\" />\n            </div>\n        </div>\n\n        <div v-else class=\"text-center py-12\">\n            <AlertCircleIcon class=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <p class=\"text-xl font-semibold\">Question not found</p>\n            <p class=\"text-gray-500 mt-2\">The question you're looking for doesn't seem to exist.</p>\n            <Button @click=\"router.push('/questions')\" variant=\"link\" class=\"mt-4\">Browse all questions</Button>\n        </div>\n    </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, inject } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport axios from 'axios'\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '../components/ui/card'\nimport { Textarea } from '../components/ui/textarea'\nimport { Button } from '../components/ui/button'\nimport { Avatar, AvatarImage, AvatarFallback } from '../components/ui/avatar'\nimport { useToast } from '../components/ui/toast'\nimport { useAuthStore } from '../stores/auth'\nimport { CircleChevronUp, UserIcon, MessageSquareIcon, EyeIcon, LockIcon, AlertCircleIcon } from 'lucide-vue-next'\nimport BackNavigator from '../components/elements/BackNavigator.vue'\nimport MarkDownEditor from '../components/elements/MarkDownEditor.vue'\nimport RecursiveAnswers from '../components/elements/RecursiveAnswers.vue'\nimport AnswersWithReplies from '../components/elements/AnswersWithReplies.vue'\nimport { defineEmits } from 'vue'\nimport { PenLine } from 'lucide-vue-next'\n\nconst route = useRoute();\nconst router = useRouter();\nconst { toast } = useToast();\nconst authStore = useAuthStore();\nconst authToken = computed(() => authStore.token);\nconst showAnswerForm = ref(false);\n\nconst question = ref(null);\nconst answers = ref([]);\nconst newAnswer = ref('');\nconst loading = ref(true);\nconst showFullContent = ref(false);\n\nconst questionBreadcrumbs = [\n    { name: 'Questions', href: '/qna' },\n    { name: route.params.slug, href: '/qna/' + route.params.slug }\n];\n\nconst truncatedContent = computed(() => {\n    if (!question.value) return '';\n    const maxLength = 300;\n    return question.value.content.length <= maxLength || showFullContent.value\n        ? question.value.content\n        : question.value.content.slice(0, maxLength) + '...';\n});\n\nconst isContentTruncated = computed(() => question.value && question.value.content.length > 300);\n\nonMounted(async () => {\n    try {\n        await fetchQuestionData();\n    } catch (error) {\n        toast({\n            title: 'Error',\n            description: error?.response?.data?.message || 'Failed to fetch question details.',\n            variant: 'destructive'\n        });\n    } finally {\n        loading.value = false;\n    }\n});\n\nconst fetchQuestionData = async () => {\n    const response = await axios.get(`/api/v1/questions/${route.params.slug}`);\n    question.value = response.data.data.question;\n    answers.value = response.data.data.answers;\n}\n\nconst submitAnswer = async () => {\n    try {\n        const response = await axios.post(\n            `/api/v1/questions/${question.value.id}/answers`,\n            { content: newAnswer.value },\n            { headers: { Authorization: `Bearer ${authToken.value}` } }\n        );\n        answers.value.push(response.data.data);\n        newAnswer.value = '';\n        showAnswerForm.value = false\n        toast({ title: 'Answer submitted', description: 'Your answer has been posted.' });\n    } catch (error) {\n        toast({\n            title: 'Error',\n            description: error?.response?.data?.message || 'Failed to submit answer.',\n            variant: 'destructive'\n        });\n    }\n};\n\nconst upvoteQuestion = async () => {\n    if (!authToken.value) {\n        return toast({ title: 'Authentication required', description: 'Log in to upvote.', variant: 'warning' });\n    }\n    try {\n        await axios.post(\n            `/api/v1/questions/${question.value.id}/upvote`,\n            {},\n            { headers: { Authorization: `Bearer ${authToken.value}` } }\n        );\n        question.value.upvotes_count++;\n        toast({ title: 'Upvoted', description: 'You upvoted this question.' });\n    } catch (error) {\n        toast({\n            title: 'Error',\n            description: error?.response?.data?.message || 'Failed to upvote question.',\n            variant: 'destructive'\n        });\n    }\n};\n\nconst handleReply = async ({ parentId, content }) => {\n    if (!authToken.value) {\n        return toast({ title: 'Authentication required', description: 'Log in to reply.', variant: 'warning' });\n    }\n    try {\n        const response = await axios.post(\n            `/api/v1/answers/${parentId}/replies`,\n            { content },\n            { headers: { Authorization: `Bearer ${authToken.value}` } }\n        );\n        toast({ title: 'Reply submitted', description: 'Your reply has been posted.' });\n        await fetchQuestionData();\n    } catch (error) {\n        toast({\n            title: 'Error',\n            description: error?.response?.data?.message || 'Failed to submit reply.',\n            variant: 'destructive'\n        });\n    }\n};\n\nconst handleUpvote = async (answerId) => {\n    if (!authToken.value) {\n        return toast({ title: 'Authentication required', description: 'Log in to upvote.', variant: 'warning' });\n    }\n    try {\n        await axios.post(\n            `/api/v1/answers/${answerId}/upvote`,\n            {},\n            { headers: { Authorization: `Bearer ${authToken.value}` } }\n        );\n        const answer = answers.value.find(a => a.id === answerId);\n        if (answer) answer.upvotes_count++;\n        toast({ title: 'Upvoted', description: 'You upvoted this answer.' });\n    } catch (error) {\n        toast({\n            title: 'Error',\n            description: error?.response?.data?.message || 'Failed to upvote answer.',\n            variant: 'destructive'\n        });\n    }\n};\n</script>\n"],"names":["ChevronUp","createLucideIcon","CircleAlert","CircleChevronUp","Lock","PenLine","props","__props","avatarVariant","cva","emit","__emit","showReplyForm","ref","replyContent","showAllReplies","toggleReply","id","submitReply","parentId","content","toggleReplies","visibleReplies","item","formatDate","dateString","getInitials","name","n","route","useRoute","router","useRouter","toast","useToast","authStore","useAuthStore","authToken","computed","showAnswerForm","question","answers","newAnswer","loading","showFullContent","questionBreadcrumbs","truncatedContent","maxLength","isContentTruncated","onMounted","fetchQuestionData","error","_b","_a","response","axios","submitAnswer","upvoteQuestion","handleReply","handleUpvote","answerId","answer","a"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}