{"version":3,"file":"QuestionAsk-o-C7Tpwu.js","sources":["../../../resources/js/views/QuestionAsk.vue"],"sourcesContent":["<template>\n    <div class=\"max-w-3xl mx-auto py-8 px-4\">\n        <BackNavigator :items=\"askQuestionBreadcrumbs\" />\n        <Card class=\"overflow-hidden\">\n            <CardHeader>\n                <CardTitle>Ask a Question</CardTitle>\n                <CardDescription>Get help from our community of experts</CardDescription>\n            </CardHeader>\n            <CardContent>\n                <form @submit.prevent=\"submitQuestion\" class=\"space-y-6\">\n                    <div class=\"space-y-2\">\n                        <Label for=\"title\">Question Title</Label>\n                        <Input v-model=\"newQuestion.title\" id=\"title\" type=\"text\"\n                            placeholder=\"e.g., How do I center a div in CSS?\" required />\n                        <p class=\"text-sm text-muted-foreground\">\n                            Be specific and imagine you're asking a question to another person.\n                        </p>\n                    </div>\n\n                    <div class=\"space-y-2\">\n                        <Label for=\"content\">Question Details</Label>\n                        <MarkDownEditor v-model=\"newQuestion.content\"\n                            placeholder=\"Provide more context about your question...\" :min-height=\"300\" />\n                        <p class=\"text-sm text-muted-foreground\">\n                            Include all the information someone would need to answer your question.\n                        </p>\n                    </div>\n\n                    <div class=\"space-y-2\">\n                        <Label>Tags</Label>\n                        <TagInput v-model=\"newQuestion.tags\" :max-tags=\"5\" placeholder=\"Add up to 5 tags\" />\n                        <p class=\"text-sm text-muted-foreground\">\n                            Add up to 5 tags to describe what your question is about.\n                        </p>\n                    </div>\n                </form>\n            </CardContent>\n            <CardFooter class=\"flex justify-between\">\n                <Button variant=\"outline\" @click=\"previewQuestion\">\n                    Preview\n                </Button>\n                <Button @click=\"submitQuestion\" :disabled=\"isSubmitting\">\n                    {{ isSubmitting ? 'Submitting...' : 'Post Your Question' }}\n                </Button>\n            </CardFooter>\n        </Card>\n\n        <QuestionPreviewModal v-if=\"showPreview\" :question=\"newQuestion\" @close=\"showPreview = false\" />\n    </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport { useRouter } from 'vue-router'\nimport axios from 'axios'\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport QuestionPreviewModal from '../components/qna/QuestionPreviewModal.vue'\nimport TagInput from '../components/elements/TagInput.vue'\nimport MarkDownEditor from '../components/elements/MarkDownEditor.vue'\nimport { toast } from '../components/ui/toast'\nimport { useAuthStore } from '../stores/auth'\nimport BackNavigator from '../components/elements/BackNavigator.vue'\n\nconst authStore = useAuthStore();\nconst router = useRouter()\nconst isSubmitting = ref(false)\nconst showPreview = ref(false)\n\nconst askQuestionBreadcrumbs = [\n    { name: 'Questions', href: '/qna' },\n    { name: 'Ask', href: '/qna/ask' }\n]\n\nconst newQuestion = ref({\n    title: '',\n    content: '',\n    tags: [],\n    attachments: []\n})\n\nconst handleFileUpload = (files) => {\n    newQuestion.value.attachments = files\n}\n\nconst submitQuestion = async () => {\n    if (!validateForm()) return\n\n    try {\n        isSubmitting.value = true\n\n        const formData = new FormData()\n        formData.append(\"title\", newQuestion.value.title)\n        formData.append(\"content\", newQuestion.value.content)\n        newQuestion.value.tags.forEach((tag, index) => {\n            formData.append(\"tags[]\", tag)\n        });\n\n        // newQuestion.value.attachments.forEach((file, index) => {\n        //     formData.append(`attachment_${index}`, file)\n        // })\n\n        const response = await axios.post('/api/v1/questions', formData, {\n            headers: {\n                Authorization: `Bearer ${authStore.token}`,\n                'Content-Type': 'multipart/form-data'\n            }\n        })\n\n        router.push(`/qna/${response.data.data.slug}`)\n        toast({\n            description: \"Your question has been successfully posted.\"\n        });\n    } catch (error) {\n        console.error('Error submitting question:', error)\n        toast({\n            variant: 'destructive',\n            description: \"Failed to submit question. Please try again.\"\n        });\n    } finally {\n        isSubmitting.value = false\n    }\n}\n\nconst validateForm = () => {\n    if (newQuestion.value.title.length < 15) {\n        toast({\n            variant: 'destructive',\n            description: \"Title should be at least 15 characters long.\"\n        });\n        return false\n    }\n    if (newQuestion.value.content.length < 30) {\n        toast({\n            variant: 'destructive',\n            description: \"Question details should be at least 30 characters long.\"\n        })\n        return false\n    }\n    if (newQuestion.value.tags.length < 1) {\n        toast({\n            variant: 'destructive',\n            description: \"Atleast 1 Tag is required!\"\n        })\n        return false\n    }\n    return true\n}\n\nconst previewQuestion = () => {\n    if (validateForm()) {\n        showPreview.value = true\n    }\n}\n</script>"],"names":["authStore","useAuthStore","router","useRouter","isSubmitting","ref","showPreview","askQuestionBreadcrumbs","newQuestion","submitQuestion","validateForm","formData","tag","index","response","axios","toast","error","previewQuestion"],"mappings":"yrBAkEA,MAAMA,EAAYC,EAAc,EAC1BC,EAASC,EAAS,EAClBC,EAAeC,EAAI,EAAK,EACxBC,EAAcD,EAAI,EAAK,EAEvBE,EAAyB,CAC3B,CAAE,KAAM,YAAa,KAAM,MAAQ,EACnC,CAAE,KAAM,MAAO,KAAM,UAAU,CACnC,EAEMC,EAAcH,EAAI,CACpB,MAAO,GACP,QAAS,GACT,KAAM,CAAE,EACR,YAAa,CAAA,CACjB,CAAC,EAMKI,EAAiB,SAAY,CAC/B,GAAKC,EAAY,EAEjB,GAAI,CACAN,EAAa,MAAQ,GAErB,MAAMO,EAAW,IAAI,SACrBA,EAAS,OAAO,QAASH,EAAY,MAAM,KAAK,EAChDG,EAAS,OAAO,UAAWH,EAAY,MAAM,OAAO,EACpDA,EAAY,MAAM,KAAK,QAAQ,CAACI,EAAKC,IAAU,CAC3CF,EAAS,OAAO,SAAUC,CAAG,CACzC,CAAS,EAMD,MAAME,EAAW,MAAMC,EAAM,KAAK,oBAAqBJ,EAAU,CAC7D,QAAS,CACL,cAAe,UAAUX,EAAU,KAAK,GACxC,eAAgB,qBAChC,CACS,CAAA,EAEDE,EAAO,KAAK,QAAQY,EAAS,KAAK,KAAK,IAAI,EAAE,EAC7CE,EAAM,CACF,YAAa,6CACzB,CAAS,CACJ,OAAQC,EAAO,CACZ,QAAQ,MAAM,6BAA8BA,CAAK,EACjDD,EAAM,CACF,QAAS,cACT,YAAa,8CACzB,CAAS,CACT,QAAc,CACNZ,EAAa,MAAQ,EAC7B,CACA,EAEMM,EAAe,IACbF,EAAY,MAAM,MAAM,OAAS,IACjCQ,EAAM,CACF,QAAS,cACT,YAAa,8CACzB,CAAS,EACM,IAEPR,EAAY,MAAM,QAAQ,OAAS,IACnCQ,EAAM,CACF,QAAS,cACT,YAAa,yDAChB,CAAA,EACM,IAEPR,EAAY,MAAM,KAAK,OAAS,GAChCQ,EAAM,CACF,QAAS,cACT,YAAa,4BAChB,CAAA,EACM,IAEJ,GAGLE,EAAkB,IAAM,CACtBR,EAAY,IACZJ,EAAY,MAAQ,GAE5B"}